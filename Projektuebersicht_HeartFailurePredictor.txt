
Projektübersicht: Heart Failure Prediction System

📌 Projektname
Heart Failure Predictor

🧭 Ziel des Projekts
Entwicklung eines End-to-End-Systems zur Vorhersage des Risikos für Herzinsuffizienz basierend auf einem strukturierten medizinischen Datensatz. Das System umfasst Datenanalyse, Machine Learning, API, Dashboard und optionales Deployment.

🎯 Projektziele
- Import und Analyse realer Patientendaten
- Klassifikation: Hat ein Patient ein Herzinsuffizienz-Risiko?
- Entwicklung eines ML-Modells zur Vorhersage
- Bereitstellung der Vorhersage über eine REST-API
- Interaktive Visualisierung über ein Streamlit-Dashboard
- Optionale Cloud-Bereitstellung mit Docker

🛠️ Eingesetzte Technologien

🗃️ Datenanalyse & Feature Engineering
- Python (pandas, numpy, seaborn, matplotlib)
- Jupyter Notebooks
- Scikit-learn für Preprocessing & Modellierung

🤖 Machine Learning
- scikit-learn (RandomForestClassifier, LogisticRegression, etc.)
- joblib (Modell speichern/laden)
- MLflow (optional)

🌐 API (Modell-Backend)
- FastAPI
- Uvicorn
- Pydantic (für Eingabedaten)

📊 Dashboard (Frontend)
- Streamlit (interaktive Oberfläche)
- Alternativ: Power BI

🐘 Datenquelle
- Kaggle Dataset: https://www.kaggle.com/datasets/fedesoriano/heart-failure-prediction
- Datei: heart.csv

🐳 Deployment & DevOps
- Docker
- Git & GitHub
- GitHub Actions (CI/CD)
- Optional: AWS EC2 / Render

🧪 Testing
- PyTest (Unit Tests)
- GitHub Actions

📂 Projektstruktur (Beispiel)

heart-failure-predictor/
├── data/                # Datendateien (z. B. heart.csv)
├── notebooks/           # EDA, Vorverarbeitung
├── ml/                  # Modelltraining, Speicherung
├── api/                 # FastAPI App für Vorhersagen
├── dashboard/           # Streamlit-Anwendung
├── docker/              # Dockerfiles
├── tests/               # Unit Tests
├── .github/             # CI/CD Workflows
├── requirements.txt
└── README.md

📈 Projektergebnis
- Analyse und Visualisierung von Risikofaktoren
- Vorhersagemodell mit API-Zugriff
- Interaktives Dashboard für Anwender:innen
- Relevantes Portfolio-Projekt für HealthTech & Data Science Bewerbungen

👨‍💻 Erweiterungen (optional)
- Model-Tracking mit MLflow
- Authentifizierung in der API
- Cloud-Deployment (z. B. AWS EC2)
